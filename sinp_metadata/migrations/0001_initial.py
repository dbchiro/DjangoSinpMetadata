# Generated by Django 4.2.20 on 2025-04-09 22:21

import datetime
from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("sinp_nomenclatures", "0003_nomenclature_parents"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        (
            "sinp_organisms",
            "0002_alter_organismmember_unique_together_and_more",
        ),
    ]

    operations = [
        migrations.CreateModel(
            name="AcquisitionFramework",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="Unique ID (UUID)",
                    ),
                ),
                ("timestamp_create", models.DateTimeField(auto_now_add=True)),
                ("timestamp_update", models.DateTimeField(auto_now=True)),
                (
                    "label",
                    models.CharField(max_length=255, verbose_name="Libellé"),
                ),
                ("desc", models.TextField(verbose_name="Description")),
                (
                    "target_description",
                    models.TextField(blank=True, null=True),
                ),
                (
                    "is_metaframework",
                    models.BooleanField(
                        blank=True,
                        null=True,
                        verbose_name="Est un métacadre parent",
                    ),
                ),
                (
                    "ecologic_or_geologic_target",
                    models.TextField(blank=True, null=True),
                ),
                (
                    "date_create",
                    models.DateField(
                        default=datetime.date.today,
                        verbose_name="Date de création",
                    ),
                ),
                (
                    "date_start",
                    models.DateField(
                        default=datetime.date.today,
                        verbose_name="Date de début",
                    ),
                ),
                (
                    "date_end",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date de fin"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "cadres d'acquisition",
                "permissions": (
                    (
                        "can_edit_self_acquisitionframework_organism",
                        "Can edit acquisition framework from user organism",
                    ),
                ),
            },
        ),
        migrations.CreateModel(
            name="ActorRole",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="Unique ID (UUID)",
                    ),
                ),
                ("timestamp_create", models.DateTimeField(auto_now_add=True)),
                ("timestamp_update", models.DateTimeField(auto_now=True)),
                (
                    "anonymization",
                    models.BooleanField(
                        default=False,
                        help_text="I want this actor's identity to be blurred when the data is distributed",
                        verbose_name="Anonymization",
                    ),
                ),
                (
                    "actor_role",
                    models.ForeignKey(
                        limit_choices_to={"type__mnemonic": "roleActeur"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="actor_role",
                        to="sinp_nomenclatures.nomenclature",
                        verbose_name="Actor's role",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "legal_person",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organism",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sinp_organisms.organism",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "rôles des acteurs",
                "unique_together": {
                    ("organism", "actor_role"),
                    ("legal_person", "actor_role"),
                },
            },
        ),
        migrations.CreateModel(
            name="SourceDatabase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="Unique ID (UUID)",
                    ),
                ),
                ("timestamp_create", models.DateTimeField(auto_now_add=True)),
                ("timestamp_update", models.DateTimeField(auto_now=True)),
                ("label", models.CharField(unique=True, verbose_name="Label")),
                (
                    "description",
                    models.TextField(
                        blank=True, default="", verbose_name="Description"
                    ),
                ),
                ("url", models.URLField(verbose_name="URL")),
                (
                    "contact",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="sinp_metadata.actorrole",
                        verbose_name="Contact",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "source databases",
            },
        ),
        migrations.CreateModel(
            name="Publication",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="Unique ID (UUID)",
                    ),
                ),
                ("timestamp_create", models.DateTimeField(auto_now_add=True)),
                ("timestamp_update", models.DateTimeField(auto_now=True)),
                (
                    "label",
                    models.CharField(
                        max_length=255, unique=True, verbose_name="Name"
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        blank=True, null=True, verbose_name="Publication URL"
                    ),
                ),
                (
                    "reference",
                    models.TextField(
                        blank=True,
                        help_text="According to ISO 690 nomenclature",
                        null=True,
                        verbose_name="Full reference",
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="metadata/publications/",
                        verbose_name="File",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "publications",
            },
        ),
        migrations.CreateModel(
            name="OtherProtocolAndMethod",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="Unique ID (UUID)",
                    ),
                ),
                ("timestamp_create", models.DateTimeField(auto_now_add=True)),
                ("timestamp_update", models.DateTimeField(auto_now=True)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("protocol", "Protocol"),
                            ("method", "Method"),
                        ]
                    ),
                ),
                ("label", models.CharField(unique=True, verbose_name="Label")),
                ("desc", models.TextField(verbose_name="Description")),
                ("reference", models.CharField(verbose_name="Reference")),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "other protocols",
            },
        ),
        migrations.CreateModel(
            name="Keyword",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="Unique ID (UUID)",
                    ),
                ),
                ("timestamp_create", models.DateTimeField(auto_now_add=True)),
                ("timestamp_update", models.DateTimeField(auto_now=True)),
                (
                    "keyword",
                    models.CharField(
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "key words",
            },
        ),
        migrations.CreateModel(
            name="Dataset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="Unique ID (UUID)",
                    ),
                ),
                ("timestamp_create", models.DateTimeField(auto_now_add=True)),
                ("timestamp_update", models.DateTimeField(auto_now=True)),
                (
                    "label",
                    models.CharField(
                        max_length=150, unique=True, verbose_name="Label"
                    ),
                ),
                (
                    "short_label",
                    models.CharField(
                        max_length=30, unique=True, verbose_name="Short label"
                    ),
                ),
                ("desc", models.TextField(verbose_name="Description")),
                (
                    "date_create",
                    models.DateField(
                        default=django.utils.timezone.now,
                        help_text="Date de création de la fiche de métadonnées du jeu de données.",
                        verbose_name="Create date",
                    ),
                ),
                (
                    "data_category_prec",
                    models.TextField(
                        default="",
                        verbose_name="Précision sur la catégorie des données",
                    ),
                ),
                (
                    "method_precision",
                    models.TextField(
                        default="",
                        verbose_name="Precisions on collecting method",
                    ),
                ),
                (
                    "protocol_precision",
                    models.TextField(
                        default="",
                        verbose_name="Precisions on collecting protocol",
                    ),
                ),
                (
                    "bbox",
                    django.contrib.gis.db.models.fields.PolygonField(
                        blank=True,
                        help_text="rectangle permettant d'englober le jeu de données",
                        null=True,
                        srid=4326,
                        verbose_name="Emprise géographique",
                    ),
                ),
                (
                    "active",
                    models.BooleanField(default=True, verbose_name="Actif"),
                ),
                (
                    "validable",
                    models.BooleanField(blank=True, verbose_name="Validable"),
                ),
                (
                    "acquisition_framework",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ds_acquisition_framework",
                        to="sinp_metadata.acquisitionframework",
                        verbose_name="Acquisition framework",
                    ),
                ),
                (
                    "collecting_method",
                    models.ManyToManyField(
                        help_text="Ensemble de techniques, savoir-faire et outils mobilisés pour collecter des données",
                        limit_choices_to={"type__mnemonic": "CodeCAMPanule"},
                        related_name="ds_collecting_method",
                        to="sinp_nomenclatures.nomenclature",
                        verbose_name="Méthode de recueil des données",
                    ),
                ),
                (
                    "collecting_protocol",
                    models.ManyToManyField(
                        help_text="Ensemble de techniques, savoir-faire et outils mobilisés pour collecter des données",
                        limit_choices_to={"type__mnemonic": "CodeCAMPanule"},
                        related_name="ds_collecting_protocol",
                        to="sinp_nomenclatures.nomenclature",
                        verbose_name="Protocole de recueil des données",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "data_category",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={
                            "type__mnemonic": "categorieDonnees"
                        },
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="ds_data_category",
                        to="sinp_nomenclatures.nomenclature",
                        verbose_name="Data category",
                    ),
                ),
                (
                    "data_origin_status",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={
                            "type__mnemonic": "statutOrigineDonnees"
                        },
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="ds_data_origin_status",
                        to="sinp_nomenclatures.nomenclature",
                        verbose_name="Data origin status",
                    ),
                ),
                (
                    "data_type",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"type__mnemonic": "typeDonnees"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="ds_data_type",
                        to="sinp_nomenclatures.nomenclature",
                        verbose_name="Data type",
                    ),
                ),
                (
                    "ebv_classes",
                    models.ManyToManyField(
                        blank=True,
                        limit_choices_to={"type__mnemonic": "classeEBV"},
                        related_name="ds_ebv_classes",
                        to="sinp_nomenclatures.nomenclature",
                        verbose_name="EBV classes (https://geobon.org/ebvs/what-are-ebvs/)",
                    ),
                ),
                (
                    "features",
                    models.ManyToManyField(
                        blank=True,
                        limit_choices_to={
                            "type__mnemonic": "caracteristiqueJdd"
                        },
                        related_name="ds_features",
                        to="sinp_nomenclatures.nomenclature",
                        verbose_name="Features",
                    ),
                ),
                (
                    "keywords",
                    models.ManyToManyField(
                        blank=True,
                        related_name="ds_keywords",
                        to="sinp_metadata.keyword",
                        verbose_name="Mots-clés",
                    ),
                ),
                (
                    "other_method",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"category": "method"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="ds_other_method",
                        to="sinp_metadata.otherprotocolandmethod",
                        verbose_name="Other method",
                    ),
                ),
                (
                    "other_protocol",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"category": "protocol"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="ds_other_protocol",
                        to="sinp_metadata.otherprotocolandmethod",
                        verbose_name="Other protocol",
                    ),
                ),
                (
                    "territory",
                    models.ManyToManyField(
                        help_text="Cible géographique du jeu de données, ou zone géographique visée par le jeu",
                        limit_choices_to={"type__mnemonic": "territory"},
                        related_name="ds_territory",
                        to="sinp_nomenclatures.nomenclature",
                        verbose_name="Territoire",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "jeux de données",
                "permissions": (
                    (
                        "can_edit_self_dataset_organism",
                        "Can edit dataset from user organism",
                    ),
                ),
            },
        ),
        migrations.AddField(
            model_name="acquisitionframework",
            name="actors",
            field=models.ManyToManyField(
                related_name="af_actor",
                to="sinp_metadata.actorrole",
                verbose_name="Acteurs",
            ),
        ),
        migrations.AddField(
            model_name="acquisitionframework",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="acquisitionframework",
            name="keywords",
            field=models.ManyToManyField(
                blank=True,
                related_name="af_keywords",
                to="sinp_metadata.keyword",
                verbose_name="Mots-clés",
            ),
        ),
        migrations.AddField(
            model_name="acquisitionframework",
            name="objective",
            field=models.ManyToManyField(
                limit_choices_to={"type__mnemonic": "objectifCA"},
                related_name="af_objective",
                to="sinp_nomenclatures.nomenclature",
                verbose_name="Objectifs",
            ),
        ),
        migrations.AddField(
            model_name="acquisitionframework",
            name="parent_framework",
            field=models.ForeignKey(
                blank=True,
                limit_choices_to={"is_metaframework": True},
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="metacadre",
                to="sinp_metadata.acquisitionframework",
                verbose_name="Métacadre parent",
            ),
        ),
        migrations.AddField(
            model_name="acquisitionframework",
            name="territory",
            field=models.ManyToManyField(
                limit_choices_to={"type__mnemonic": "territoire"},
                related_name="af_territory",
                to="sinp_nomenclatures.nomenclature",
                verbose_name="Territoires",
            ),
        ),
        migrations.AddField(
            model_name="acquisitionframework",
            name="territory_level",
            field=models.ForeignKey(
                blank=True,
                limit_choices_to={"type__mnemonic": "echelleTerritoriale"},
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="af_territory_level",
                to="sinp_nomenclatures.nomenclature",
                verbose_name="Niveau territorial",
            ),
        ),
        migrations.AddField(
            model_name="acquisitionframework",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
    ]
