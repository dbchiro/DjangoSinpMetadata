# Generated by Django 3.2.5 on 2021-08-09 20:37

import datetime
from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AcquisitionFramework',
            fields=[
                ('timestamp_create', models.DateTimeField(auto_now_add=True)),
                ('timestamp_update', models.DateTimeField(auto_now=True)),
                ('id_acquisition_framework', models.AutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Identifiant unique')),
                ('label', models.CharField(max_length=255, verbose_name='Libellé')),
                ('desc', models.TextField(verbose_name='Description')),
                ('target_description', models.TextField(blank=True, null=True)),
                ('is_metaframework', models.BooleanField(blank=True, null=True, verbose_name='Est un métacadre parent')),
                ('ecologic_or_geologic_target', models.TextField(blank=True, null=True)),
                ('date_start', models.DateField(default=datetime.date.today, verbose_name='Date de début')),
                ('date_end', models.DateField(blank=True, null=True, verbose_name='Date de fin')),
            ],
            options={
                'verbose_name_plural': "cadres d'acquisition",
            },
        ),
        migrations.CreateModel(
            name='ActorRole',
            fields=[
                ('timestamp_create', models.DateTimeField(auto_now_add=True)),
                ('timestamp_update', models.DateTimeField(auto_now=True)),
                ('id_actor_role', models.AutoField(primary_key=True, serialize=False)),
                ('acquisition_framework', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sinp_metadata.acquisitionframework')),
            ],
            options={
                'verbose_name_plural': 'rôles des acteurs',
            },
        ),
        migrations.CreateModel(
            name='Nomenclature',
            fields=[
                ('id_nomenclature', models.AutoField(db_index=True, primary_key=True, serialize=False)),
                ('type', models.CharField(db_index=True, max_length=255, verbose_name='Type de nomenclature')),
                ('code', models.CharField(db_index=True, max_length=255, verbose_name='Code')),
                ('label', models.CharField(max_length=255, verbose_name='Libellé')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('active', models.BooleanField(default=True, verbose_name='Est utilisé')),
            ],
            options={
                'verbose_name_plural': 'nomenclatures',
                'unique_together': {('type', 'code')},
            },
        ),
        migrations.CreateModel(
            name='Organism',
            fields=[
                ('timestamp_create', models.DateTimeField(auto_now_add=True)),
                ('timestamp_update', models.DateTimeField(auto_now=True)),
                ('id_organism', models.AutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Identifiant unique')),
                ('label', models.CharField(max_length=500, unique=True, verbose_name='Nom')),
                ('short_label', models.CharField(max_length=50, unique=True, verbose_name='Nom court')),
                ('geographic_area_details', models.CharField(blank=True, help_text="Information précisant la zone géographique d'action. Exemple : Basse-Terre", max_length=500, null=True, verbose_name='Détails sur la zone géographique')),
                ('address', models.CharField(blank=True, max_length=500, null=True, verbose_name='Adresse')),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True, verbose_name='Code postal')),
                ('municipality', models.CharField(blank=True, max_length=250, null=True, verbose_name='Commune')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Adresse mail')),
                ('phone_number', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Les numéros de téléphones doivent être renseignés avec le format : '+999999999'. jusqu'à 15 chiffres sont autorisés", regex='^\\+?1?\\d{9,15}$')], verbose_name='Numéro de téléphone')),
                ('url', models.URLField(blank=True, null=True, verbose_name='URL')),
                ('action_scope', models.ForeignKey(help_text="Périmètre d'action de l'organisme (Européen, national, Supra-régional, Régional, Inconnu)", limit_choices_to={'type': 'action_scope'}, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organism_action_scope', to='sinp_metadata.nomenclature', verbose_name="Périmètre d'action")),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('geographic_area', models.ForeignKey(blank=True, help_text="Zone d'action géographique de l'organisme", limit_choices_to={'type': 'geographic_area'}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organism_geographic_area', to='sinp_metadata.nomenclature', verbose_name='Zone géographique')),
            ],
            options={
                'verbose_name_plural': 'organismes',
            },
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('timestamp_create', models.DateTimeField(auto_now_add=True)),
                ('timestamp_update', models.DateTimeField(auto_now=True)),
                ('id_publication', models.AutoField(primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=255, unique=True, verbose_name='Nom')),
                ('url', models.URLField(blank=True, null=True, verbose_name='URL de la publication')),
                ('reference', models.TextField(blank=True, help_text='Suivant la nomenclature ISO 690', null=True, verbose_name='Référence complète')),
                ('file', models.FileField(blank=True, null=True, upload_to='metadata/publications/', verbose_name='Fichier')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'publications',
            },
        ),
        migrations.CreateModel(
            name='OrganismMember',
            fields=[
                ('timestamp_create', models.DateTimeField(auto_now_add=True)),
                ('timestamp_update', models.DateTimeField(auto_now=True)),
                ('id_organism_member', models.AutoField(primary_key=True, serialize=False)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
                ('member_level', models.ForeignKey(limit_choices_to={'type': 'member_level'}, on_delete=django.db.models.deletion.CASCADE, related_name='member_level', to='sinp_metadata.nomenclature', verbose_name='Niveau du membre')),
                ('organism', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sinp_metadata.organism', verbose_name='Organisme')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Membre des organismes',
                'unique_together': {('member', 'organism', 'member_level')},
            },
        ),
        migrations.AddField(
            model_name='organism',
            name='members',
            field=models.ManyToManyField(blank=True, related_name='organism_member', through='sinp_metadata.OrganismMember', to=settings.AUTH_USER_MODEL, verbose_name='Membres'),
        ),
        migrations.AddField(
            model_name='organism',
            name='status',
            field=models.ForeignKey(help_text="Permet d'indiquer si l'organisme est public ou privé", limit_choices_to={'type': 'organism_status'}, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organism_status', to='sinp_metadata.nomenclature', verbose_name='Statut'),
        ),
        migrations.AddField(
            model_name='organism',
            name='type',
            field=models.ForeignKey(limit_choices_to={'type': 'organism_type'}, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organism_type', to='sinp_metadata.nomenclature', verbose_name="Type d'organisme"),
        ),
        migrations.AddField(
            model_name='organism',
            name='updated_by',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('timestamp_create', models.DateTimeField(auto_now_add=True)),
                ('timestamp_update', models.DateTimeField(auto_now=True)),
                ('keyword', models.CharField(max_length=255, primary_key=True, serialize=False, unique=True)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'mots clés',
            },
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('timestamp_create', models.DateTimeField(auto_now_add=True)),
                ('timestamp_update', models.DateTimeField(auto_now=True)),
                ('id_dataset', models.AutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Identifiant unique')),
                ('label', models.CharField(max_length=150, unique=True, verbose_name='Nom du jeu de données')),
                ('short_label', models.CharField(max_length=30, unique=True, verbose_name='Libellé court')),
                ('desc', models.TextField(verbose_name='Description')),
                ('creation_date', models.DateField(default=django.utils.timezone.now, help_text='Date de création de la fiche de métadonnées du jeu de données.', verbose_name='Date de création')),
                ('revision_date', models.DateField(blank=True, help_text='Date de révision du jeu de données ou de sa fiche de métadonnées. Il est fortement recommandé de remplir cet attribut si une révision de la fiche ou du jeu de données a été effectuée', null=True, verbose_name='Date de révision')),
                ('marine_domain', models.BooleanField(default=False, verbose_name='Domaine maritime')),
                ('terrestrial_domain', models.BooleanField(default=True, verbose_name='Domaine terrestre')),
                ('bbox', django.contrib.gis.db.models.fields.PolygonField(blank=True, help_text="rectangle permettant d'englober le jeu de données", null=True, srid=4326, verbose_name='Emprise géographique')),
                ('active', models.BooleanField(default=True, verbose_name='Actif')),
                ('validable', models.BooleanField(blank=True, verbose_name='Validable')),
                ('acquisition_framework', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ds_acquisition_framework', to='sinp_metadata.acquisitionframework', verbose_name="Cadre d'acquisition")),
                ('actor_role_organism', models.ManyToManyField(related_name='ds_actor_organism', through='sinp_metadata.ActorRole', to='sinp_metadata.Organism', verbose_name='Acteurs (personnes morales)')),
                ('actor_role_user', models.ManyToManyField(related_name='ds_actor_user', through='sinp_metadata.ActorRole', to=settings.AUTH_USER_MODEL, verbose_name='Acteurs (personnes physiques)')),
                ('actor_sinp', models.ForeignKey(limit_choices_to={'actor_role__code': '1'}, on_delete=django.db.models.deletion.DO_NOTHING, related_name='ds_actor_sinp', to='sinp_metadata.actorrole', verbose_name='Point de contact principal pour la plateforme SINP')),
                ('collecting_method', models.ManyToManyField(help_text='Ensemble de techniques, savoir-faire et outils mobilisés pour collecter des données', limit_choices_to={'type': 'collect_method'}, related_name='ds_collecting_method', to='sinp_metadata.Nomenclature', verbose_name='Méthode de recueil des données')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('data_type', models.ForeignKey(blank=True, limit_choices_to={'type': 'data_type'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ds_data_type', to='sinp_metadata.nomenclature', verbose_name='Type de données')),
                ('keywords', models.ManyToManyField(blank=True, related_name='ds_keywords', to='sinp_metadata.Keyword', verbose_name='Mots-clés')),
                ('objective', models.ForeignKey(blank=True, limit_choices_to={'type': 'dataset_objective'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ds_objective', to='sinp_metadata.nomenclature', verbose_name='Objectifs')),
                ('protocols', models.ManyToManyField(limit_choices_to={'type': 'protocol_type'}, related_name='ds_protocols', to='sinp_metadata.Nomenclature', verbose_name='Protocoles')),
                ('territory', models.ManyToManyField(help_text='Cible géographique du jeu de données, ou zone géographique visée par le jeu', limit_choices_to={'type': 'territory'}, related_name='ds_territory', to='sinp_metadata.Nomenclature', verbose_name='Territoire')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'jeux de données',
            },
        ),
        migrations.AddField(
            model_name='actorrole',
            name='actor_role',
            field=models.ForeignKey(limit_choices_to={'type': 'actor_role'}, on_delete=django.db.models.deletion.CASCADE, related_name='actor_role', to='sinp_metadata.nomenclature', verbose_name="Rôle de l'acteur"),
        ),
        migrations.AddField(
            model_name='actorrole',
            name='created_by',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='actorrole',
            name='dataset',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sinp_metadata.dataset'),
        ),
        migrations.AddField(
            model_name='actorrole',
            name='organism',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sinp_metadata.organism'),
        ),
        migrations.AddField(
            model_name='actorrole',
            name='role',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='actorrole',
            name='updated_by',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='acquisitionframework',
            name='actor',
            field=models.ManyToManyField(related_name='af_actor', to='sinp_metadata.ActorRole', verbose_name='Acteurs'),
        ),
        migrations.AddField(
            model_name='acquisitionframework',
            name='context',
            field=models.ManyToManyField(limit_choices_to={'type': 'context'}, related_name='af_context', to='sinp_metadata.Nomenclature', verbose_name='volet SINP'),
        ),
        migrations.AddField(
            model_name='acquisitionframework',
            name='created_by',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='acquisitionframework',
            name='financing_type',
            field=models.ForeignKey(blank=True, limit_choices_to={'type': 'financing_type'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='af_financing_type', to='sinp_metadata.nomenclature', verbose_name='Type de financement'),
        ),
        migrations.AddField(
            model_name='acquisitionframework',
            name='geo_accuracy',
            field=models.ForeignKey(blank=True, limit_choices_to={'type': 'geo_accuracy'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='af_geo_accuracy', to='sinp_metadata.nomenclature', verbose_name='Précision géographique'),
        ),
        migrations.AddField(
            model_name='acquisitionframework',
            name='keywords',
            field=models.ManyToManyField(blank=True, related_name='af_keywords', to='sinp_metadata.Keyword', verbose_name='Mots-clés'),
        ),
        migrations.AddField(
            model_name='acquisitionframework',
            name='objective',
            field=models.ManyToManyField(limit_choices_to={'type': 'objective'}, related_name='af_objective', to='sinp_metadata.Nomenclature', verbose_name='Objectifs'),
        ),
        migrations.AddField(
            model_name='acquisitionframework',
            name='parent_framework',
            field=models.ForeignKey(blank=True, limit_choices_to={'is_metaframework': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='metacadre', to='sinp_metadata.acquisitionframework', verbose_name='Métacadre parent'),
        ),
        migrations.AddField(
            model_name='acquisitionframework',
            name='territory',
            field=models.ManyToManyField(limit_choices_to={'type': 'territory'}, related_name='af_territory', to='sinp_metadata.Nomenclature', verbose_name='Territoires'),
        ),
        migrations.AddField(
            model_name='acquisitionframework',
            name='territory_level',
            field=models.ForeignKey(blank=True, limit_choices_to={'type': 'territory_level'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='af_territory_level', to='sinp_metadata.nomenclature', verbose_name='Niveau territorial'),
        ),
        migrations.AddField(
            model_name='acquisitionframework',
            name='updated_by',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='actorrole',
            unique_together={('organism', 'dataset', 'actor_role'), ('organism', 'acquisition_framework', 'actor_role'), ('role', 'dataset', 'actor_role'), ('role', 'acquisition_framework', 'actor_role')},
        ),
    ]
