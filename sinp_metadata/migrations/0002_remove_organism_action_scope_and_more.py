# Generated by Django 4.2 on 2023-04-20 22:37

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    dependencies = [
        ("sinp_nomenclatures", "0003_rename_item_nomenclature"),
        ("sinp_organisms", "0003_organism_parent"),
        ("sinp_metadata", "0001_initial"),
    ]

    operations = [
        migrations.RemoveField(
            model_name="organism",
            name="action_scope",
        ),
        migrations.RemoveField(
            model_name="organism",
            name="created_by",
        ),
        migrations.RemoveField(
            model_name="organism",
            name="geographic_area",
        ),
        migrations.RemoveField(
            model_name="organism",
            name="members",
        ),
        migrations.RemoveField(
            model_name="organism",
            name="status",
        ),
        migrations.RemoveField(
            model_name="organism",
            name="type",
        ),
        migrations.RemoveField(
            model_name="organism",
            name="updated_by",
        ),
        migrations.AlterUniqueTogether(
            name="organismmember",
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name="organismmember",
            name="created_by",
        ),
        migrations.RemoveField(
            model_name="organismmember",
            name="member",
        ),
        migrations.RemoveField(
            model_name="organismmember",
            name="member_level",
        ),
        migrations.RemoveField(
            model_name="organismmember",
            name="organism",
        ),
        migrations.RemoveField(
            model_name="organismmember",
            name="updated_by",
        ),
        migrations.AlterField(
            model_name="acquisitionframework",
            name="context",
            field=models.ManyToManyField(
                limit_choices_to={"type__mnemonic": "context"},
                related_name="af_context",
                to="sinp_nomenclatures.nomenclature",
                verbose_name="volet SINP",
            ),
        ),
        migrations.AlterField(
            model_name="acquisitionframework",
            name="financing_type",
            field=models.ForeignKey(
                blank=True,
                limit_choices_to={"type__mnemonic": "financing_type"},
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="af_financing_type",
                to="sinp_nomenclatures.nomenclature",
                verbose_name="Type de financement",
            ),
        ),
        migrations.AlterField(
            model_name="acquisitionframework",
            name="geo_accuracy",
            field=models.ForeignKey(
                blank=True,
                limit_choices_to={"type__mnemonic": "geo_accuracy"},
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="af_geo_accuracy",
                to="sinp_nomenclatures.nomenclature",
                verbose_name="Précision géographique",
            ),
        ),
        migrations.AlterField(
            model_name="acquisitionframework",
            name="objective",
            field=models.ManyToManyField(
                limit_choices_to={"type__mnemonic": "objective"},
                related_name="af_objective",
                to="sinp_nomenclatures.nomenclature",
                verbose_name="Objectifs",
            ),
        ),
        migrations.AlterField(
            model_name="acquisitionframework",
            name="territory",
            field=models.ManyToManyField(
                limit_choices_to={"type__mnemonic": "territory"},
                related_name="af_territory",
                to="sinp_nomenclatures.nomenclature",
                verbose_name="Territoires",
            ),
        ),
        migrations.AlterField(
            model_name="acquisitionframework",
            name="territory_level",
            field=models.ForeignKey(
                blank=True,
                limit_choices_to={"type__mnemonic": "territory_level"},
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="af_territory_level",
                to="sinp_nomenclatures.nomenclature",
                verbose_name="Niveau territorial",
            ),
        ),
        migrations.AlterField(
            model_name="actorrole",
            name="actor_role",
            field=models.ForeignKey(
                limit_choices_to={"type__mnemonic": "actor_role"},
                on_delete=django.db.models.deletion.CASCADE,
                related_name="actor_role",
                to="sinp_nomenclatures.nomenclature",
                verbose_name="Rôle de l'acteur",
            ),
        ),
        migrations.AlterField(
            model_name="actorrole",
            name="organism",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="sinp_organisms.organism",
            ),
        ),
        migrations.AlterField(
            model_name="dataset",
            name="actor_role_organism",
            field=models.ManyToManyField(
                related_name="ds_actor_organism",
                through="sinp_metadata.ActorRole",
                to="sinp_organisms.organism",
                verbose_name="Acteurs (personnes morales)",
            ),
        ),
        migrations.AlterField(
            model_name="dataset",
            name="collecting_method",
            field=models.ManyToManyField(
                help_text="Ensemble de techniques, savoir-faire et outils mobilisés pour collecter des données",
                limit_choices_to={"type__mnemonic": "collect_method"},
                related_name="ds_collecting_method",
                to="sinp_nomenclatures.nomenclature",
                verbose_name="Méthode de recueil des données",
            ),
        ),
        migrations.AlterField(
            model_name="dataset",
            name="data_type",
            field=models.ForeignKey(
                blank=True,
                limit_choices_to={"type__mnemonic": "data_type"},
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="ds_data_type",
                to="sinp_nomenclatures.nomenclature",
                verbose_name="Type de données",
            ),
        ),
        migrations.AlterField(
            model_name="dataset",
            name="objective",
            field=models.ForeignKey(
                blank=True,
                limit_choices_to={"type__mnemonic": "dataset_objective"},
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="ds_objective",
                to="sinp_nomenclatures.nomenclature",
                verbose_name="Objectifs",
            ),
        ),
        migrations.AlterField(
            model_name="dataset",
            name="protocols",
            field=models.ManyToManyField(
                limit_choices_to={"type__mnemonic": "protocol_type"},
                related_name="ds_protocols",
                to="sinp_nomenclatures.nomenclature",
                verbose_name="Protocoles",
            ),
        ),
        migrations.AlterField(
            model_name="dataset",
            name="territory",
            field=models.ManyToManyField(
                help_text="Cible géographique du jeu de données, ou zone géographique visée par le jeu",
                limit_choices_to={"type__mnemonic": "territory"},
                related_name="ds_territory",
                to="sinp_nomenclatures.nomenclature",
                verbose_name="Territoire",
            ),
        ),
        migrations.DeleteModel(
            name="Nomenclature",
        ),
        migrations.DeleteModel(
            name="Organism",
        ),
        migrations.DeleteModel(
            name="OrganismMember",
        ),
    ]
